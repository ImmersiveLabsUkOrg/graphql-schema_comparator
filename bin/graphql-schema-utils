#!/usr/bin/env ruby

require "bundler/setup"
require "thor"
require "graphql/schema_comparator"

class GraphQLSchemaUtils < Thor
  desc "compare OLD_SCHEMA NEW_SCHEMA", "Compares OLD_SCHEMA with NEW_SCHEMA and returns a list of changes"

  def compare(old_schema, new_schema)
    parsed_old = parse_schema(old_schema)
    parsed_new = parse_schema(new_schema)

    result = GraphQL::SchemaComparator.compare(parsed_old, parsed_new)

    if result.identical?
      say "âœ…  Schemas are identical"
    else
      print_changes(result)
    end
  end

  private

  def print_changes(result)
    say "[GraphQL][SchemaComparator] Detected the following changes between schemas:"
    say "\n"

    say "ðŸ’”  = Breaking Change"
    say "ðŸ’š  = Non-Breaking Change"
    say "\n"

    result.changes.each do |change|
      if change.breaking
        say "ðŸ’”  #{change.message}", :red
      else
        say "ðŸ’š  #{change.message}", :green
      end
    end
  end

  def parse_schema(schema)
    if File.file?(schema)
      File.read(schema)
    elsif schema.is_a?(String)
      schema
    else
      raise ArgumentError, "Invalid argument #{schema}. Must be an IDL string or file containing the schema IDL."
    end
  end
end

GraphQLSchemaUtils.start(ARGV)
